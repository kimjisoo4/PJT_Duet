%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e9620f8c34305754d8cc9a7e49e852d9, type: 3}
  m_Name: Dialogues_en
  m_EditorClassIdentifier: 
  m_LocaleId:
    m_Code: en
  m_SharedData: {fileID: 11400000, guid: d54ef40192185f346814204ad5ec6609, type: 2}
  m_Metadata:
    m_Items: []
  m_TableData:
  - m_Id: 8225427456
    m_Localized: hello. This is Jisu Kim, a Unity programmer.
    m_Metadata:
      m_Items: []
  - m_Id: 156594737152
    m_Localized: ' This project is being produced for the <b>Duet</b> portfolio.
      For use as a portfolio, the use of assets other than graphic assets is avoided.'
    m_Metadata:
      m_Items: []
  - m_Id: 1818461868032
    m_Localized: <b>Duet</b> aims to be an action game where you swap between two
      characters.
    m_Metadata:
      m_Items: []
  - m_Id: 1933608095744
    m_Localized: Need written code and explanation?
    m_Metadata:
      m_Items: []
  - m_Id: 2004890292224
    m_Localized: All right. I'll make the code and explanation available.
    m_Metadata:
      m_Items: []
  - m_Id: 2008312844288
    m_Localized: All right. I will let you play without explaining the code.
    m_Metadata:
      m_Items: []
  - m_Id: 4813295587328
    m_Localized: yes. Let's look at the code and explanation we worked on.
    m_Metadata:
      m_Items: []
  - m_Id: 4816009302016
    m_Localized: no. I won't look.
    m_Metadata:
      m_Items: []
  - m_Id: 96213135314944
    m_Localized: ' <b>DialogueSystem</b> is the system used for code description
      within <b>Duet</b>. <b>DialogueSystem</b> is an existing modularized and reused
      function, and is being expanded and used within <b>Duet</b>.'
    m_Metadata:
      m_Items: []
  - m_Id: 96320157175808
    m_Localized: ' <b>DialogueSystem</b> consists of two interfaces: <b>IDalogueSystem</b>
      and <b>IDialogue</b>.'
    m_Metadata:
      m_Items: []
  - m_Id: 96411819495424
    m_Localized: " <b>IDialogueSystem</b> and <b>IDIalogue</b> are modularized and
      reused so that they can be applied to other projects regardless of this project.\n
      In addition, the basic type was created in the form of an interface to facilitate
      future changes and expansion."
    m_Metadata:
      m_Items: []
  - m_Id: 2532538409422848
    m_Localized: " This is a <b>DialogueSystemComponent</b> created by inheriting
      <b>IDialougeSystem</b>.\n In this way, basic components that inherit <b>IDialogueSystem</b>
      have been created in advance to make them easy to reuse in the future."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803008
    m_Localized: ' <b>PlayDialogue(IDialogue)</b> receives the next <b>IDialogue</b>
      to start the conversation, and if it is currently ending, <b>IDialogue</b>
      is placed in the queue to wait. I did it.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803009
    m_Localized: ' The <b>NextDialogue(IDialogue)</b> function continues the conversation
      by receiving the next <b>IDialogue</b>. If there is no <b>IDialogue</b>, the
      currently playing <b>IDialogue< Receive /b>''s <b>NextDialogue</b> to continue
      the conversation. If the next conversation is also Null, the conversation ends.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803010
    m_Localized: "The <b>CancelDialogue()</b> and <b>FinishDialogue()</b> functions
      are both functions for ending a conversation. Both functions are designed to
      proceed with the <b>EndDailogue()</b> function.\n By dividing cancellation,
      completion, and termination into separate categories, different processes can
      be performed depending on the outcome of the conversation."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803011
    m_Localized: " We made it so that delegate event and Unity Event are called when
      the conversation starts, cancels, completes, and ends, respectively. This allows
      other classes to subscribe to the state of the conversation.\n <b>ToggleableUnityEvent</b>
      is a class that contains UnityEvent that can be toggled with a bool value.
      We created a custom inspector so that the UnityEvent property can be Show/Hide
      in the inspector depending on the bool value."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803012
    m_Localized: " <b>IDialogue</b> consists of two elements: the content of the
      conversation and the conversation that follows.\n <b>Dialogue</b> was created
      by inheriting <b>IDIalogue</b> and <b>ScriptableObject</b>."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803013
    m_Localized: " <b>Dialogue</b> is basically set to save the conversation as a
      string type, but depending on whether Unity's <b>Localization</b> package is
      included, the conversation can be retrieved as a <b>LocalizedString</b> type.
      It was created so that it can be done.\n Currently, <b>Duet</b> has imported
      the <b>Localization</b> package, so dialogue appropriate for each language
      is output through <b>LocalizedString</b>."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803014
    m_Localized: ' Also, by overriding the operator, we adjusted it to avoid problems
      when comparing with classes that inherit other <b>IDialogue</b>.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803015
    m_Localized: " <b>IDIalogueDisplay</b> is an Interface created to display <b>Dialogue</b>
      on the screen.\n Neither <b>IDialogueDisplay</b> nor <b>IDialogueSystem</b>
      were created to have dependencies on each other, but only dependencies on <b>IDialogue</b>.
      This makes it easy to modify and expand each function."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803016
    m_Localized: " This is <b>DialogueDisplay</b>, which was created by inheriting
      <b>IDialogueDisplay</b>.\n By declaring it as an abstract class, we made it
      necessary to override the function for outputting dialogue in the inherited
      class."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803017
    m_Localized: " We made the <b>OnStartWriting()</b> function an abstract function
      so that the inherited class could redefine the way it displays on the screen.
      \n In <b>Duet</b>, <b>DoTween</b> has been redefined to express conversation
      text as if it were typing."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803018
    m_Localized: " Like <b>DialogueSystem</b>, it was written so that delegate event
      and Unity Event can be called and subscribed to when activating, ending blend,
      starting blend, deactivating, starting writing, skip writing, ending writing,
      or changing dialogue.\n Unlike <b>DialogueSystem</b>, <b>DialogueDisplay</b>
      is a class used as UI, and an additional blend end/start event was created
      to determine whether the process of activating/deactivating the UI has finished/started.
      Yes."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803019
    m_Localized: ' In <b>Duet</b>, we built a conversation system by expanding the
      module created above.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803020
    m_Localized: ' <b>DialogueController</b> corresponds to Presenter in <b>MVP</b>.
      <b>DialogueController</b> is written using the observer pattern and state machine
      pattern.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803021
    m_Localized: " <b>DialogueController</b> subscribes to events from <b>IDialogueSystem</b>
      and <b>IDialogueDisplay</b> and changes the state of the state machine according
      to the called event.\n For example, when <b>OnStartedDialogue</b> of <b>IDialogueSystem</b>
      is called, the dialog is set to <b>SetDialogue(IDialogue)</b> and <b>of <b>IDialogueDisplay</b>.
      It works by calling the >StartWriting()</b> function and changing the state
      of the state machine to the state where the dialogue is being written."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803022
    m_Localized: ' We are using a strategy pattern that changes the processing of
      user input, etc. according to the changed status.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803023
    m_Localized: ' The <b>DialogueControllerState</b> used in the <b>DialogueController</b>''s
      state machine. There is a virtual function according to the user''s input processing,
      and this is overridden in the child class to process the input.'
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803024
    m_Localized: " <b>FIniteStateMachineSystem</b> is a pre-built state machine like
      <b>DialogueSystem</b>. Use a class that inherits the <b>IState</b> interface
      in generic form.\n In the case of <b>FiniteStateMachineSystem</b>, it is used
      not only in <b>DialogueController</b> but also in other UI, statements, etc."
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803025
    m_Localized: ' I inherit <b>DialogueDisplay</b> and create and use <b>DuetDialogueDisplay</b>.
      <b>DuetDialogueDisplay</b> is also using a state machine and updating the dialog
      content via <b>DoTween</b>. '
    m_Metadata:
      m_Items: []
  - m_Id: 2534840725803026
    m_Localized: " Like this, in <b>Duet</b>, <b>MVP</b> is implemented through the
      above <b>IDialogueSystem</b>, <b>IDialogueDisplay</b> interface and <b>DialogueController</b>
      components. > I am handling the conversation by implementing the pattern.\n
      When you run a function to output a dialogue through <b>DialogueController</b>
      corresponding to the Presenter, <b>IDialogueDisplay</b>, which is a Viewer,
      is activated, and when activation is complete, it is displayed in <b>Model</b>.
      Assign <b>IDialogue</b> to the corresponding <b>IDialogueSystem</b>.\n When
      <b>IDialogueSystem</b> starts, the Controller retrieves the Model's conversation
      and updates it in <b>IDIalogueDisplay</b>."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533270491136
    m_Localized: ' This screen is the initial character selection screen. You can
      choose 2 characters out of 3 randomly selected characters. '
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239872
    m_Localized: ' There are three types of playable characters currently being worked
      on: a warrior, a fighter, and an archer, and each character has one skill and
      one appearance skill.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239873
    m_Localized: ' The character selection screen is largely composed of <b>ICreateCharacterSystem,
      ICreateCharacterDisplay, CreateCharacterButton, and CreatePlayerCharacterController</b>. '
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239874
    m_Localized: " In the case of <b>ICreateCharacterSystem</b>, character data is
      created, and <b>ICreateCharacterDisplay</b> outputs the set character data
      to the UI.\n <b>ICreateCharacterSystem</b> and <b>ICreateCharacterDisplay</b>,
      like <b>IDialogueSystem</b>, do not have dependencies on each other and are
      managed through a separate Controller class."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239875
    m_Localized: ' <b>CreateCharacterSystem</b> inherits the <b>ICreateCharacterSystem</b>
      interface. <b>CreateCharacterSystem</b> was created to create and save <b>CharacterData</b>
      from <b>CharacterInformationData[]</b>.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239876
    m_Localized: ' In <b>Duet</b>, every character has a <b>ScriptableObject</b>
      called <b>CharacterInformationData</b>. <b>CharacterInformationData</b> stores
      the character''s model, skills, descriptions, etc. '
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239877
    m_Localized: ' <b>CharacterData</b> is set by selecting a random skill from the
      skills set in <b>CharacterInformationData</b>. There are no spare skills currently
      produced, so the skills of each class are fixed.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239878
    m_Localized: " Through the <b>CreateCharacterDatas(int)</b> function, select
      random data as much as an int value from <b>CharacterInformationData[]</b>,
      create <b>CharacterData</b>, and store the data in the List. Save.\n You can
      remove generated data through the <b>ClearCharacterDatas()</b> function."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239879
    m_Localized: ' <b>ICreateCharacterSystem</b>, like other systems, is designed
      to call Event when creating or removing data.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239880
    m_Localized: " <b>CreateCharacterDisplay</b> inherits <b>ICreateCharacterDisplay</b>.
      This is a class for displaying UI on the screen and is composed of a state
      machine pattern.\n Depending on functions such as <b>Activate(), Inactivate(),
      FinishedState()</b>, the state changes to Active, Appear, Leave, Inactive,
      etc."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239881
    m_Localized: " When activated through the <b>Activate()</b> function, the state
      changes to the activation transition state or activated state. When the function
      is executed, activation is immediately notified, and if it immediately goes
      to the activation state, Blend In is notified that it is terminated.\n The
      <b>Inactivate()</b> function also changes the state to the inactivate transition
      and inactivated state. When the function is executed, it notifies that Blend
      Out starts, and if it immediately goes to the disabled state, it notifies that
      it is deactivated."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239882
    m_Localized: ' <b>FinishedState(CreateCharacterDisplayState)</b> is called when
      blending in the BlendOut/In state ends and changes the state. Notifies that
      BlendIn will be terminated or disabled depending on the status change.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239883
    m_Localized: ' The <b>SetCharacterDatas(IEnumerable<CharacterData>)</b> function
      receives <b>CharacterData</b> and sets the data in <b>CreateCharacterButton</b>.
      <b>CreateCharacterButton</b> changes text, images, etc. through set data.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239884
    m_Localized: ' The <b>CreateCharacterDisplayState</b> used in the state machine
      of <b>CreateCharacterDisplay</b>. Appear and Leave states have buttons below
      them, and when the transition of all buttons is completed, the corresponding
      event is subscribed to notify that the state is terminated.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239885
    m_Localized: " <b>CreateCharacterButton</b>, the UI displayed by <b>CreateCharacterDisplay</b>.
      Like other classes, it is composed of a state machine pattern.\n It changes
      its state by receiving <b>Activate(), Inactivate()</b> functions and events
      such as Submit, Select, and Deselect from Unity's EventSystem."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533308239886
    m_Localized: ' <b>CreateCharacterButtonState</b> has states such as Active, Inactive,
      Appear, and Leave as well as Select and Submit. Each state is animated using
      <b>DoTween</b>.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533312434176
    m_Localized: " <b>CreatePlayerCharacterController</b>, which manages <b>ICreateCharacterSystem</b>
      and <b>ICreateCharacterDisplay</b>. Like <b>DialogueSystemController</b>, it
      was constructed using the observer pattern and state machine pattern.\n The
      data set in <b>ICreateCharacterSystem</b> is applied to <b>ICreateCharacterDisplay</b>,
      and a character is created according to the input of <b>CreateCharacterButton</b>
      and added to the player."
    m_Metadata:
      m_Items: []
  - m_Id: 2914533312434177
    m_Localized: ' Like <b>DialogueSystemController</b>, it is configured to subscribe
      and process events of <b>ICreateCharacterSystem</b> and <b>ICreateCharacterDisplay</b>.
      The state is changed according to the called event, and input is processed
      according to the state.'
    m_Metadata:
      m_Items: []
  - m_Id: 2914533312434178
    m_Localized: " <b>CreatePlayerCharacter</b> is also managed through the state
      machine pattern.\n <b>SubmitedButton(CreateCharacterButtonComponent)</b> Creates
      a virtual function to change the processing of input according to each state."
    m_Metadata:
      m_Items: []
  - m_Id: 3387696739651584
    m_Localized: ' Likewise, <b>CreateCharacterSystem</b> was also created using
      the MVP pattern and state machine pattern.'
    m_Metadata:
      m_Items: []
  - m_Id: 3387696773206016
    m_Localized: ' This is the end of what is currently written. Further information
      will be added soon.'
    m_Metadata:
      m_Items: []
  references:
    version: 2
    RefIds: []
